plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "java" // java plugin is needed for the shadow plugin to work
    id "eclipse"
    id "net.minecraftforge.gradle" version "5.1.+"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
}

version = "1.20.2-2.2.2" // remember to update mods.toml and itlt.VERSION too
group = "dk.zlepper.itlt" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "itlt"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"
minecraft {
    mappings channel: "official", version: "1.20.2"

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")
            property "forge.logging.console.level", "info"
            arg "-mixin.config=itlt.mixins.json"
            arg "--add-exports com.google.gson/com/google/gson/Gson=org.spongepowered.mixin"
            arg "--add-opens com.google.gson/com/google/gson/Gson=org.spongepowered.mixin"
            mods {
                itlt {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    maven {
        url = "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:1.20.2-48.0.0"

    // Mixin
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    // itlt uses the "image4j" library to read .ico files
    implementation files("thirdPartyLibs/image4j-0.7.2.jar")
    shade files("thirdPartyLibs/image4j-0.7.2.jar")
    library files("thirdPartyLibs/image4j-0.7.2.jar")

    // itlt uses the "Apache Commons Imaging" library to read .icns files
    /*implementation "org.apache.commons:commons-imaging:1.0-alpha2"
    shade "org.apache.commons:commons-imaging:1.0-alpha2"*/
    // due to it being such a big library and not supporting class removal, I've made a single method return null,
    // removed jpeg, tiff, examples and tests and then compiled it. This fork supports removing classes for formats we
    // don't use, therefore allowing us to drastically reduce the shrunk jar's filesize
    implementation files("thirdPartyLibs/commons-imaging-1.0-alpha2-custom.jar")
    shade files("thirdPartyLibs/commons-imaging-1.0-alpha2-custom.jar")
    library files("thirdPartyLibs/commons-imaging-1.0-alpha2-custom.jar")
}

ext {
    MANIFEST = manifest {
        attributes([
                "Specification-Title": "itlt",
                "Specification-Vendor": "Paint_Ninja",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" : "Paint_Ninja",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "itlt.mixins.json",
                "Main-Class": "dk.zlepper.itlt.Main" // so that the pop-up window code works
        ])
    }
}

jar {
    manifest.from(MANIFEST)
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.shade]

    // Apache Commons Imaging needs to be put somewhere else to prevent a NoClassDefFoundError
    relocate "org.apache.commons.imaging", "${project.group}.shadow.org.apache.commons.imaging"

    // image4j needs to be put somewhere else to prevent a ResolutionException with other mods - See Issue #45
    relocate "net.sf.image4j", "${project.group}.shadow.net.sf.image4j"

    manifest.from(MANIFEST)
}

reobf {
    shadowJar { }
}

task shrinkJar(type: Jar, dependsOn: reobfShadowJar) {
    archiveClassifier.set("shrunk")

    final File inputJar = file("${buildDir}/libs/${archivesBaseName}-${project.version}.jar")
    final String shadowGroup = project.group.replace('.','/') + "/shadow"
    final String apacheImaging = "${shadowGroup}/org/apache/commons/imaging"

    from zipTree(inputJar)

    exclude "net/sf/image4j/example/**", "net/sf/image4j/test/**"

    exclude "${apacheImaging}/formats/gif/**", "${apacheImaging}/formats/psd/**", "${apacheImaging}/formats/rgbe/**",
            "${apacheImaging}/formats/xbm/**", "${apacheImaging}/formats/xpm/**", "${apacheImaging}/formats/pnm/**",
            "${apacheImaging}/formats/pcx/**", "${apacheImaging}/formats/dcx/**", "${apacheImaging}/formats/png/**",
            "${apacheImaging}/formats/bmp/**", "${apacheImaging}/formats/wbmp/**", "${apacheImaging}/formats/ico/**"

    exclude "${apacheImaging}/common/itu_t4/**", "${apacheImaging}/common/mylzw/**", "${apacheImaging}/common/BasicCParser**",
            "${apacheImaging}/common/RationalNumber**", "${apacheImaging}/common/GenericImageMetadata**",
            "${apacheImaging}/common/ZlibDeflate**", "${apacheImaging}/common/PackBits**", "${apacheImaging}/icc/**",
            "${apacheImaging}/palette/**", "${apacheImaging}/color/**", "${apacheImaging}/ImageDump**",
            "${apacheImaging}/ColorTools**", "${apacheImaging}/internal/**"

    exclude "META-INF/LICENSE.txt", "META-INF/NOTICE.txt"

    manifest.from(MANIFEST)
}

//tasks.build.dependsOn reobfShadowJar
//jar.finalizedBy reobfShadowJar
tasks.build.dependsOn shrinkJar
jar.finalizedBy shrinkJar

mixin {
    add sourceSets.main, "itlt.refmap.json"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.fork = true
}
